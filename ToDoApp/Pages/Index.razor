@page "/"

<PageTitle>Home</PageTitle>

<MudText Class="d-flex justify-center" Typo="Typo.h3 ">Welcome</MudText>
<br /> 

<MudDropContainer T="KanbanTaskItem" @ref="_dropContainer" Items="@_tasks" ItemsSelector="@((item,column) => item.Status == column)" ItemDropped="TaskUpdated" Class="d-flex flex-row">
	<ChildContent>
		@foreach (var item in _sections)
		{
			<MudPaper Elevation="0" Width="270px" MinHeight="400px" Class="pa-4 ma-4 d-flex flex-column mud-background-gray rounded-lg">
				<MudToolBar DisableGutters="true">
					<MudText Typo="Typo.subtitle1"><b>@item.Name</b></MudText>
					<MudSpacer />
					<MudMenu Icon="@Icons.Material.Rounded.MoreHoriz" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight" ListClass="pa-2 d-flex flex-column" PopoverClass="mud-elevation-25">
						<MudButton Size="Size.Small" Color="Color.Error" StartIcon="@Icons.Material.Outlined.Delete" OnClick="@( () => DeleteSection(item))">Delete Section</MudButton>
						<MudButton Size="Size.Small" Color="Color.Default" StartIcon="@Icons.Material.Rounded.Edit">Rename Section</MudButton>
					</MudMenu>
				</MudToolBar>
				<MudText Typo="Typo.body2" >@item.Descirption</MudText>
				<br/>
				@*<MudText Typo="Typo.body1">@String.Format("{0:M/d/yyyy}",item.Date)</MudText>*@
				@if (item.Date != null)
				{
					<MudText Typo="Typo.body1">Due Date: @String.Format("{0:M/d/yyyy}",item.Date)</MudText>
					}
				<MudDropZone T="KanbanTaskItem" Identifier="@item.Name" Class="mud-height-full" />
				@if (item.NewTaskOpen)
				{
					<MudPaper Elevation="25" Class="pa-2 rounded-lg">
						<MudTextField @bind-Value="item.NewTaskName" Placeholder="New Task" DisableUnderLine="true" Margin="Margin.Dense" Class="mx-2 mt-n2"></MudTextField>
						<MudButton OnClick="@(() => AddTask(item))" Size="Size.Small" Color="Color.Primary" FullWidth="true">Add Task</MudButton>
						

					</MudPaper>
				}
				else
				{
					<MudButton OnClick="@(() => item.NewTaskOpen = !item.NewTaskOpen)" StartIcon="@Icons.Material.Filled.Add" FullWidth="true" Class="rounded-lg py-2">Add Task</MudButton>
				}
			</MudPaper>
		}
		<MudPaper Class="pa-4" Elevation="0" Width="224px">
			@if (_addSectionOpen)
			{
				<MudPaper Elevation="0" Width="224px" Class="pa-4 d-flex flex-column mud-background-gray rounded-lg">
					<EditForm Model="@newSectionModel" OnValidSubmit="OnValidSectionSubmit">
						<DataAnnotationsValidator />
						<MudTextField @bind-Value="newSectionModel.Name" For="@(() => newSectionModel.Name)" Placeholder="Title" DisableUnderLine="true"></MudTextField>
						<MudTextField @bind-Value="newSectionModel.Descirption" Lines="3" Clearable="true" T=" string" Label="Description" Variant="Variant.Text" Immediate="true"></MudTextField>
						<MudDatePicker Label="Due Date" @bind-Date="newSectionModel.Date" />
						<MudButton ButtonType="ButtonType.Submit" Size="Size.Small" Color="Color.Primary" FullWidth="true">Add Section</MudButton>

					</EditForm>
				</MudPaper>
			}
			else
			{
				<MudButton OnClick="OpenAddNewSection" Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" Class="rounded-lg py-2" FullWidth="true">Add Section</MudButton>
			}
		</MudPaper>
	</ChildContent>
	<ItemRenderer>
		<MudPaper Elevation="25" Class="pa-1 rounded-lg my-3 d-flex justify-space-between align-center overflow-hidden">
			<div>
				<MudCheckBox Size="Size.Small" @bind-Checked="@Basic_CheckBox1">
					@context.Name
				</MudCheckBox>
			</div>
			<MudIconButton OnClick="() => RemoveTask(context)" Color="Color.Error" Size="Size.Small" Icon="@Icons.Material.Filled.Delete" aria-label="delete"></MudIconButton>
		</MudPaper>
	</ItemRenderer>
</MudDropContainer>

@code {
	private MudDropContainer<KanbanTaskItem> _dropContainer;


	
	public bool Basic_CheckBox1 { get; set; } = false	;

	private bool _addSectionOpen;
	/* handling board events */
	private void TaskUpdated(MudItemDropInfo<KanbanTaskItem> info)
	{
		info.Item.Status = info.DropzoneIdentifier;
	}

	/* Setup for board  */
	private List<KanBanSections> _sections = new()
		{ 
			new KanBanSections("To Do","",null, false, String.Empty),
		};

	public class KanBanSections
	{
		public string Name { get; init; }
		public string? Descirption { get; set; }
		public DateTime? Date { get; set; }
		public bool NewTaskOpen { get; set; }
		public string NewTaskName { get; set; }



		public KanBanSections(string name, string descirption, DateTime? date, bool newTaskOpen, string newTaskName)
		{
			Name = name;
			NewTaskOpen = newTaskOpen;
			NewTaskName = newTaskName;
			Descirption = descirption;
			Date = date;
			//date = Date;

		}
	}
	public class KanbanTaskItem
	{
		public string Name { get; init; }
		public string Status { get; set; }

		public KanbanTaskItem(string name, string status)
		{
			Name = name;
			Status = status;
		}
	}

	private List<KanbanTaskItem> _tasks = new()
		{
			new KanbanTaskItem("Write unit test", "To Do"),
		};

	KanBanNewForm newSectionModel = new KanBanNewForm();

	public class KanBanNewForm
	{
		[Required]
		[StringLength(10, ErrorMessage = "Name length can't be more than 10.")]
		public string Name { get; set; }
		public string Descirption { get; set; }
		public DateTime?  Date { get; set; }


	}

	private void OnValidSectionSubmit(EditContext context)
	{
		_sections.Add(new KanBanSections(newSectionModel.Name, newSectionModel.Descirption, newSectionModel.Date, false, String.Empty));
		newSectionModel.Name = string.Empty;
		newSectionModel.Descirption = string.Empty;
		newSectionModel.Date = null;
		_addSectionOpen = false;
	}

	private void OpenAddNewSection()
	{
		_addSectionOpen = true;
	}

	private void AddTask(KanBanSections section)
	{
		_tasks.Add(new KanbanTaskItem(section.NewTaskName, section.Name));
		section.NewTaskName = string.Empty;
		section.NewTaskOpen = false;
		_dropContainer.Refresh();
	}
	private void RemoveTask(KanbanTaskItem task)
	{
		_tasks.Remove(task);
		_dropContainer.Refresh();

		
	}
	private void DeleteSection(KanBanSections section)
	{
		if (_sections.Count == 1)
		{
			_tasks.Clear();
			_sections.Clear();
		}
		else
		{
			int newIndex = _sections.IndexOf(section) - 1;
			if (newIndex < 0)
			{
				newIndex = 0;
			}

			_sections.Remove(section);

			var tasks = _tasks.Where(x => x.Status == section.Name);
			foreach (var item in tasks)
			{
				item.Status = _sections[newIndex].Name;
			}
		}
	}
}